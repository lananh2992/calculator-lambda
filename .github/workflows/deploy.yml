name: CI/CD Lambda Calculator on LocalStack

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  test-localstack:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_DEFAULT_REGION: us-east-1
      LOCALSTACK_URL: http://localhost:4566
      FUNC_NAME: calculator

    services:
      localstack:
        image: localstack/localstack:stable
        env:
          SERVICES: lambda,iam,cloudwatch,logs
          # Exécuter Lambda SANS docker-in-docker
          LAMBDA_RUNTIME_EXECUTOR: local
          LAMBDA_EXECUTOR: local
          DEBUG: "1"
          AWS_DEFAULT_REGION: us-east-1
        ports:
          - 4566:4566
        # Pas de healthcheck Docker : on attend nous-mêmes dans un step

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install tooling & deps
        run: |
          pip install --upgrade pip
          pip install awscli awscli-local jq pytest
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      # ---- UNIT TESTS (sans AWS/LocalStack) ----
      - name: Run unit tests
        if: ${{ hashFiles('tests/unit/**/*.py') != '' }}
        run: pytest -q tests/unit

      # ---- PACKAGE ZIP ----
      - name: Package Lambda
        run: |
          rm -rf build function.zip
          mkdir -p build
          cp lambda_function.py build/
          if [ -s requirements.txt ]; then
            pip install -r requirements.txt -t build/
          fi
          (cd build && zip -r ../function.zip .)
          ls -lh function.zip

      # ---- WAIT LOCALSTACK ----
      - name: Wait for LocalStack to be ready
        run: |
          echo "Waiting for LocalStack on $LOCALSTACK_URL ..."
          for i in {1..90}; do
            if curl -fsS "$LOCALSTACK_URL/_localstack/health" | jq . >/dev/null 2>&1; then
              echo "LocalStack health endpoint responded."
              break
            fi
            echo "Not ready yet (health) – try $i ..."
            sleep 2
          done
          for i in {1..60}; do
            if awslocal lambda list-functions >/dev/null 2>&1; then
              echo "Lambda API reachable via awslocal."
              exit 0
            fi
            echo "Not ready yet (lambda) – try $i ..."
            sleep 2
          done
          echo "LocalStack never became ready."; exit 1

      # ---- DEPLOY TO LOCALSTACK ----
      - name: Create dummy IAM role (LocalStack)
        run: |
          set -e
          ROLE_NAME=lambda-ex
          POLICY_DOC='{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"lambda.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
          awslocal iam get-role --role-name "$ROLE_NAME" >/dev/null 2>&1 || \
            awslocal iam create-role --role-name "$ROLE_NAME" --assume-role-policy-document "$POLICY_DOC"
          awslocal iam attach-role-policy --role-name "$ROLE_NAME" --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole || true

      - name: Deploy Lambda to LocalStack
        run: |
          set -e
          awslocal lambda delete-function --function-name "$FUNC_NAME" || true
          ROLE_ARN=$(awslocal iam get-role --role-name lambda-ex | jq -r '.Role.Arn')
          awslocal lambda create-function \
            --function-name "$FUNC_NAME" \
            --runtime python3.10 \
            --handler lambda_function.lambda_handler \
            --zip-file fileb://function.zip \
            --role "$ROLE_ARN"

      # ---- INTEGRATION TESTS (contre LocalStack) ----
      - name: Run integration tests (LocalStack)
        if: ${{ hashFiles('tests/integration/**/*.py') != '' }}
        run: pytest -q tests/integration

      - name: Upload artifacts (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lambda-ci-artifacts
          path: |
            function.zip

      # ---- DEBUG LOGS SI ÉCHEC ----
      - name: Debug – print LocalStack logs
        if: failure()
        run: |
          echo "=== Docker ps ==="
          docker ps -a
          echo "=== Find localstack container logs ==="
          ID=$(docker ps -aq --filter "ancestor=localstack/localstack")
          if [ -n "$ID" ]; then
            for cid in $ID; do
              echo "=== Logs for $cid ==="
              docker logs "$cid" --tail 300 || true
            done
          else
            echo "No localstack container found by ancestor filter."
          fi